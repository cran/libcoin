
> isequal <- function(a, b) {
+     attributes(a) <- NULL
+     attributes(b) <- NULL
+     if (!isTRUE(all.equal(a, b))) {
+         print(a, digits  .... [TRUNCATED] 

> library("libcoin")

> set.seed(290875)

> x <- gl(5, 20)

> y <- round(runif(length(x)), 1)

> ls1 <- LinStatExpCov(X = model.matrix(~x - 1), Y = matrix(y, 
+     ncol = 1))

> ls1$LinearStatistic
[1]  8.8  9.5 10.3  9.8 10.5

> tapply(y, x, sum)
   1    2    3    4    5 
 8.8  9.5 10.3  9.8 10.5 

> ls2 <- LinStatExpCov(X = x, Y = matrix(y, ncol = 1))

> all.equal(ls1[-grep("Xfactor", names(ls1))], ls2[-grep("Xfactor", 
+     names(ls2))])
[1] TRUE

> X <- rbind(0, diag(nlevels(x)))

> ix <- unclass(x)

> ylev <- sort(unique(y))

> Y <- rbind(0, matrix(ylev, ncol = 1))

> iy <- .bincode(y, breaks = c(-Inf, ylev, Inf))

> ls3 <- LinStatExpCov(X = X, ix = ix, Y = Y, iy = iy)

> all.equal(ls1[-grep("Table", names(ls1))], ls3[-grep("Table", 
+     names(ls3))])
[1] TRUE

> ls3 <- LinStatExpCov(X = X, ix = factor(ix), Y = Y, 
+     iy = factor(iy))

> all.equal(ls1[-grep("Table", names(ls1))], ls3[-grep("Table", 
+     names(ls3))])
[1] TRUE

> ls4 <- LinStatExpCov(ix = ix, Y = Y, iy = iy)

> all.equal(ls3[-grep("Xfactor", names(ls3))], ls4[-grep("Xfactor", 
+     names(ls4))])
[1] TRUE

> ls3$Table
, , 1

     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,]    0    0    0    0    0    0    0    0    0     0     0     0
[2,]    0    0    4    4    1    2    3    0    1     2     3     0
[3,]    0    2    2    1    2    2    5    0    1     1     3     1
[4,]    0    1    1    4    0    1    5    2    0     2     3     1
[5,]    0    0    2    2    4    2    2    1    3     2     1     1
[6,]    0    1    3    1    1    1    2    2    2     6     1     0


> xtabs(~ix + iy)
   iy
ix  1 2 3 4 5 6 7 8 9 10 11
  1 0 4 4 1 2 3 0 1 2  3  0
  2 2 2 1 2 2 5 0 1 1  3  1
  3 1 1 4 0 1 5 2 0 2  3  1
  4 0 2 2 4 2 2 1 3 2  1  1
  5 1 3 1 1 1 2 2 2 6  1  0

> ls1$Covariance
 [1]  1.3572364 -0.3393091 -0.3393091 -0.3393091 -0.3393091  1.3572364
 [7] -0.3393091 -0.3393091 -0.3393091  1.3572364 -0.3393091 -0.3393091
[13]  1.3572364 -0.3393091  1.3572364

> vcov(ls1)
           [,1]       [,2]       [,3]       [,4]       [,5]
[1,]  1.3572364 -0.3393091 -0.3393091 -0.3393091 -0.3393091
[2,] -0.3393091  1.3572364 -0.3393091 -0.3393091 -0.3393091
[3,] -0.3393091 -0.3393091  1.3572364 -0.3393091 -0.3393091
[4,] -0.3393091 -0.3393091 -0.3393091  1.3572364 -0.3393091
[5,] -0.3393091 -0.3393091 -0.3393091 -0.3393091  1.3572364

> doTest(ls1, teststat = "maximum", pvalue = FALSE)
$TestStatistic
[1] 0.8411982

$p.value
[1] NA


> doTest(ls1, teststat = "maximum")
$TestStatistic
[1] 0.8411982

$p.value
[1] 0.8852087


> doTest(ls1, teststat = "maximum", log = TRUE)
$TestStatistic
[1] 0.8411982

$p.value
[1] 0.108822


> doTest(ls1, teststat = "maximum", lower = TRUE)
$TestStatistic
[1] 0.8411982

$p.value
[1] 0.1150168


> doTest(ls1, teststat = "maximum", lower = TRUE, log = TRUE)
$TestStatistic
[1] 0.8411982

$p.value
[1] -2.164164


> doTest(ls1, teststat = "quadratic")
$TestStatistic
[1] 1.077484

$p.value
[1] 0.897828


> set.seed(29)

> ls1d <- LinStatExpCov(X = model.matrix(~x - 1), Y = matrix(y, 
+     ncol = 1), nresample = 10, standardise = TRUE)

> set.seed(29)

> ls1s <- LinStatExpCov(X = as.double(1:5)[x], Y = matrix(y, 
+     ncol = 1), nresample = 10, standardise = TRUE)

> ls1c <- lmult(c(1:5), ls1d)

> stopifnot(isequal(ls1c, ls1s))

> set.seed(29)

> ls1d <- LinStatExpCov(X = model.matrix(~x - 1), Y = matrix(c(y, 
+     y), ncol = 2), nresample = 10, standardise = TRUE)

> set.seed(29)

> ls1s <- LinStatExpCov(X = as.double(1:5)[x], Y = matrix(c(y, 
+     y), ncol = 2), nresample = 10, standardise = TRUE)

> ls1c <- lmult(c(1:5), ls1d)

> stopifnot(isequal(ls1c, ls1s))

> t1 <- ctabs(ix = ix, iy = iy)

> t2 <- xtabs(~ix + iy)

> max(abs(t1[-1, -1] - t2))
[1] 0

> N <- 20

> P <- 3

> Lx <- 10

> Ly <- 5

> Q <- 4

> B <- 2

> iX2d <- rbind(0, matrix(runif(Lx * P), nrow = Lx))

> ix <- sample(1:Lx, size = N, replace = TRUE)

> levels(ix) <- 1:Lx

> ixf <- factor(ix, levels = 1:Lx, labels = 1:Lx)

> x <- iX2d[ix + 1, ]

> Xfactor <- diag(Lx)[ix, ]

> iY2d <- rbind(0, matrix(runif(Ly * Q), nrow = Ly))

> iy <- sample(1:Ly, size = N, replace = TRUE)

> levels(iy) <- 1:Ly

> iyf <- factor(iy, levels = 1:Ly, labels = 1:Ly)

> y <- iY2d[iy + 1, ]

> weights <- sample(0:5, size = N, replace = TRUE)

> block <- sample(gl(B, ceiling(N/B))[1:N])

> subset <- sort(sample(1:N, floor(N * 1.5), replace = TRUE))

> subsety <- sample(1:N, floor(N * 1.5), replace = TRUE)

> r1 <- rep(1:ncol(x), ncol(y))

> r1Xfactor <- rep(1:ncol(Xfactor), ncol(y))

> r2 <- rep(1:ncol(y), each = ncol(x))

> r2Xfactor <- rep(1:ncol(y), each = ncol(Xfactor))

> LECV <- function(X, Y, weights = integer(0), subset = integer(0), 
+     block = integer(0)) {
+     if (length(weights) == 0) 
+         weights <- .... [TRUNCATED] 

> cmpr <- function(ret1, ret2) {
+     if (inherits(ret1, "LinStatExpCov")) {
+         if (!ret1$varonly) 
+             ret1$Covariance <- vcov(ret1 .... [TRUNCATED] 

> LECVxyws <- LinStatExpCov(x, y, weights = weights, 
+     subset = subset)

> LEVxyws <- LinStatExpCov(x, y, weights = weights, 
+     subset = subset, varonly = TRUE)

> testit <- function(...) {
+     a <- LinStatExpCov(x, y, ...)
+     b <- LECV(x, y, ...)
+     d <- LinStatExpCov(X = iX2d, ix = ix, Y = iY2d, iy =  .... [TRUNCATED] 

> stopifnot(testit() && testit(weights = weights) && 
+     testit(subset = subset) && testit(weights = weights, subset = subset) && 
+     testit(blo .... [TRUNCATED] 

> testit <- function(...) {
+     a <- LinStatExpCov(X = ix, y, ...)
+     b <- LECV(Xfactor, y, ...)
+     d <- LinStatExpCov(X = integer(0), ix = ix .... [TRUNCATED] 

> stopifnot(testit() && testit(weights = weights) && 
+     testit(subset = subset) && testit(weights = weights, subset = subset) && 
+     testit(blo .... [TRUNCATED] 

> LinStatExpCov(X = iX2d, ix = ix, Y = iY2d, iy = iy, 
+     weights = weights, subset = subset, nresample = 10)$PermutedLinearStatistic
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 15.486226 15.432786 15.474636 15.434733 15.515989 15.421226 15.523577
 [2,]  7.864472  7.948006  8.105228  8.390763  8.212044  8.493673  8.415919
 [3,] 12.398382 12.290212 11.905712 12.506639 12.143855 12.549147 12.590900
 [4,] 31.244688 31.476627 31.257920 31.264541 31.096744 31.405390 31.259421
 [5,] 17.500047 17.688850 17.055915 15.065147 16.586396 15.315949 16.382058
 [6,] 24.466142 24.647923 25.464893 24.239801 25.488434 24.296588 23.694321
 [7,] 43.423057 43.421097 43.330443 43.612924 43.424099 43.430492 43.309780
 [8,] 24.311651 23.474319 22.844531 23.490053 23.541204 22.749540 22.388328
 [9,] 34.180046 34.430423 35.397534 33.988759 34.366957 33.293748 33.389741
[10,] 13.461330 13.490553 13.492064 13.434007 13.447127 13.491634 13.476994
[11,]  6.973432  7.169633  7.259611  6.943487  7.017767  7.094398  7.241183
[12,] 10.672723 10.658055 10.574382 10.675107 10.743783 10.837748 10.788257
           [,8]      [,9]     [,10]
 [1,] 15.434192 15.491818 15.398248
 [2,]  7.834800  8.223809  7.925817
 [3,] 12.362877 11.997518 12.169918
 [4,] 31.510352 31.284964 31.576643
 [5,] 18.211173 16.969768 17.197270
 [6,] 23.773081 25.183959 24.742788
 [7,] 43.375471 43.374905 43.496870
 [8,] 23.445718 22.372659 23.729797
 [9,] 34.264857 35.341197 34.487409
[10,] 13.498456 13.473376 13.482370
[11,]  7.221054  7.329256  7.097392
[12,] 10.669965 10.540119 10.702889

> MPinverse <- function(x, tol = sqrt(.Machine$double.eps)) {
+     SVD <- svd(x)
+     pos <- SVD$d > max(tol * SVD$d[1], 0)
+     inv <- SVD$v[, pos .... [TRUNCATED] 

> quadform <- function(linstat, expect, MPinv) {
+     censtat <- linstat - expect
+     censtat %*% MPinv %*% censtat
+ }

> linstat <- ls1$LinearStatistic

> expect <- ls1$Expectation

> MPinv <- MPinverse(vcov(ls1))$MPinv

> MPinv_sym <- MPinv[lower.tri(MPinv, diag = TRUE)]

> qf1 <- quadform(linstat, expect, MPinv)

> qf2 <- .Call(libcoin:::R_quadform, linstat, expect, 
+     MPinv_sym)

> stopifnot(isequal(qf1, qf2))

> sumweights <- sum(weights[subset])

> expecty <- a0 <- colSums(y[subset, ] * weights[subset])/sumweights

> a1 <- .Call(libcoin:::R_ExpectationInfluence, y, weights, 
+     subset)

> a2 <- .Call(libcoin:::R_ExpectationInfluence, y, as.double(weights), 
+     as.double(subset))

> a3 <- .Call(libcoin:::R_ExpectationInfluence, y, weights, 
+     as.double(subset))

> a4 <- .Call(libcoin:::R_ExpectationInfluence, y, as.double(weights), 
+     subset)

> a5 <- LinStatExpCov(x, y, weights = weights, subset = subset)$ExpectationInfluence

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4) && isequal(a0, a5))

> sumweights <- sum(weights[subset])

> yc <- t(t(y) - expecty)

> r1y <- rep(1:ncol(y), ncol(y))

> r2y <- rep(1:ncol(y), each = ncol(y))

> a0 <- colSums(yc[subset, r1y] * yc[subset, r2y] * 
+     weights[subset])/sumweights

> a0 <- matrix(a0, ncol = ncol(y))

> vary <- diag(a0)

> a0 <- a0[lower.tri(a0, diag = TRUE)]

> a1 <- .Call(libcoin:::R_CovarianceInfluence, y, weights, 
+     subset, 0)

> a2 <- .Call(libcoin:::R_CovarianceInfluence, y, as.double(weights), 
+     as.double(subset), 0)

> a3 <- .Call(libcoin:::R_CovarianceInfluence, y, weights, 
+     as.double(subset), 0)

> a4 <- .Call(libcoin:::R_CovarianceInfluence, y, as.double(weights), 
+     subset, 0)

> a5 <- LinStatExpCov(x, y, weights = weights, subset = subset)$CovarianceInfluence

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4) && isequal(a0, a5))

> a1 <- .Call(libcoin:::R_CovarianceInfluence, y, weights, 
+     subset, 1)

> a2 <- .Call(libcoin:::R_CovarianceInfluence, y, as.double(weights), 
+     as.double(subset), 1)

> a3 <- .Call(libcoin:::R_CovarianceInfluence, y, weights, 
+     as.double(subset), 1)

> a4 <- .Call(libcoin:::R_CovarianceInfluence, y, as.double(weights), 
+     subset, 1)

> a5 <- LinStatExpCov(x, y, weights = weights, subset = subset, 
+     varonly = TRUE)$VarianceInfluence

> a0 <- vary

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4) && isequal(a0, a5))

> a0 <- colSums(x[subset, ] * weights[subset])

> a0
[1] 59.67771 31.68129 47.29375

> a1 <- .Call(libcoin:::R_ExpectationX, x, P, weights, 
+     subset)

> a2 <- .Call(libcoin:::R_ExpectationX, x, P, as.double(weights), 
+     as.double(subset))

> a3 <- .Call(libcoin:::R_ExpectationX, x, P, weights, 
+     as.double(subset))

> a4 <- .Call(libcoin:::R_ExpectationX, x, P, as.double(weights), 
+     subset)

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4) && isequal(a0, LECVxyws$ExpectationX))

> a0 <- colSums(x[subset, ]^2 * weights[subset])

> a1 <- .Call(libcoin:::R_CovarianceX, x, P, weights, 
+     subset, 1)

> a2 <- .Call(libcoin:::R_CovarianceX, x, P, as.double(weights), 
+     as.double(subset), 1)

> a3 <- .Call(libcoin:::R_CovarianceX, x, P, weights, 
+     as.double(subset), 1)

> a4 <- .Call(libcoin:::R_CovarianceX, x, P, as.double(weights), 
+     subset, 1)

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> a0 <- as.vector(colSums(Xfactor[subset, ] * weights[subset]))

> a0
 [1]  0 15  1  4  9  2 20  6  0 15

> a1 <- .Call(libcoin:::R_ExpectationX, ix, Lx, weights, 
+     subset)

> a2 <- .Call(libcoin:::R_ExpectationX, ix, Lx, as.double(weights), 
+     as.double(subset))

> a3 <- .Call(libcoin:::R_ExpectationX, ix, Lx, weights, 
+     as.double(subset))

> a4 <- .Call(libcoin:::R_ExpectationX, ix, Lx, as.double(weights), 
+     subset)

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> a1 <- .Call(libcoin:::R_CovarianceX, ix, Lx, weights, 
+     subset, 1)

> a2 <- .Call(libcoin:::R_CovarianceX, ix, Lx, as.double(weights), 
+     as.double(subset), 1)

> a3 <- .Call(libcoin:::R_CovarianceX, ix, Lx, weights, 
+     as.double(subset), 1)

> a4 <- .Call(libcoin:::R_CovarianceX, ix, Lx, as.double(weights), 
+     subset, 1)

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> r1x <- rep(1:ncol(Xfactor), ncol(Xfactor))

> r2x <- rep(1:ncol(Xfactor), each = ncol(Xfactor))

> a0 <- colSums(Xfactor[subset, r1x] * Xfactor[subset, 
+     r2x] * weights[subset])

> a0 <- matrix(a0, ncol = ncol(Xfactor))

> vary <- diag(a0)

> a0 <- a0[lower.tri(a0, diag = TRUE)]

> a1 <- .Call(libcoin:::R_CovarianceX, ix, Lx, weights, 
+     subset, 0)

> a2 <- .Call(libcoin:::R_CovarianceX, ix, Lx, as.double(weights), 
+     as.double(subset), 0)

> a3 <- .Call(libcoin:::R_CovarianceX, ix, Lx, weights, 
+     as.double(subset), 0)

> a4 <- .Call(libcoin:::R_CovarianceX, ix, Lx, as.double(weights), 
+     subset, 0)

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> a0 <- sum(weights[subset])

> a1 <- .Call(libcoin:::R_Sums, N, weights, subset)

> a2 <- .Call(libcoin:::R_Sums, N, as.double(weights), 
+     as.double(subset))

> a3 <- .Call(libcoin:::R_Sums, N, weights, as.double(subset))

> a4 <- .Call(libcoin:::R_Sums, N, as.double(weights), 
+     subset)

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> r1 <- rep(1:ncol(x), ncol(y))

> r2 <- rep(1:ncol(y), each = ncol(x))

> a0 <- colSums(x[subset, r1] * y[subset, r2] * weights[subset])

> a1 <- .Call(libcoin:::R_KronSums, x, P, y, weights, 
+     subset, 0)

> a2 <- .Call(libcoin:::R_KronSums, x, P, y, as.double(weights), 
+     as.double(subset), 0)

> a3 <- .Call(libcoin:::R_KronSums, x, P, y, weights, 
+     as.double(subset), 0)

> a4 <- .Call(libcoin:::R_KronSums, x, P, y, as.double(weights), 
+     subset, 0)

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> a0 <- as.vector(colSums(Xfactor[subset, r1Xfactor] * 
+     y[subset, r2Xfactor] * weights[subset]))

> a1 <- .Call(libcoin:::R_KronSums, ix, Lx, y, weights, 
+     subset, 0)

> a2 <- .Call(libcoin:::R_KronSums, ix, Lx, y, as.double(weights), 
+     as.double(subset), 0)

> a3 <- .Call(libcoin:::R_KronSums, ix, Lx, y, weights, 
+     as.double(subset), 0)

> a4 <- .Call(libcoin:::R_KronSums, ix, Lx, y, as.double(weights), 
+     subset, 0)

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> a0 <- colSums(x[subset, r1] * y[subsety, r2])

> a1 <- .Call(libcoin:::R_KronSums_Permutation, x, P, 
+     y, subset, subsety)

> a2 <- .Call(libcoin:::R_KronSums_Permutation, x, P, 
+     y, as.double(subset), as.double(subsety))

> stopifnot(isequal(a0, a1) && isequal(a0, a2))

> a0 <- as.vector(colSums(Xfactor[subset, r1Xfactor] * 
+     y[subsety, r2Xfactor]))

> a1 <- .Call(libcoin:::R_KronSums_Permutation, ix, 
+     Lx, y, subset, subsety)

> a2 <- .Call(libcoin:::R_KronSums_Permutation, ix, 
+     Lx, y, as.double(subset), as.double(subsety))

> stopifnot(isequal(a0, a1) && isequal(a0, a2))

> a0 <- colSums(x[subset, ] * weights[subset])

> a1 <- .Call(libcoin:::R_colSums, x, weights, subset)

> a2 <- .Call(libcoin:::R_colSums, x, as.double(weights), 
+     as.double(subset))

> a3 <- .Call(libcoin:::R_colSums, x, weights, as.double(subset))

> a4 <- .Call(libcoin:::R_colSums, x, as.double(weights), 
+     subset)

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> a0 <- as.vector(xtabs(weights ~ ixf, subset = subset))

> a1 <- ctabs(ix, weights = weights, subset = subset)[-1]

> a2 <- ctabs(ix, weights = as.double(weights), subset = as.double(subset))[-1]

> a3 <- ctabs(ix, weights = weights, subset = as.double(subset))[-1]

> a4 <- ctabs(ix, weights = as.double(weights), subset = subset)[-1]

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> a0 <- xtabs(weights ~ ixf + iyf, subset = subset)

> class(a0) <- "matrix"

> dimnames(a0) <- NULL

> attributes(a0)$call <- NULL

> a1 <- ctabs(ix, iy, weights = weights, subset = subset)[-1, 
+     -1]

> a2 <- ctabs(ix, iy, weights = as.double(weights), 
+     subset = as.double(subset))[-1, -1]

> a3 <- ctabs(ix, iy, weights = weights, subset = as.double(subset))[-1, 
+     -1]

> a4 <- ctabs(ix, iy, weights = as.double(weights), 
+     subset = subset)[-1, -1]

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> a0 <- xtabs(weights ~ ixf + iyf + block, subset = subset)

> class(a0) <- "array"

> dimnames(a0) <- NULL

> attributes(a0)$call <- NULL

> a1 <- ctabs(ix, iy, block, weights, subset)[-1, -1, 
+     ]

> a2 <- ctabs(ix, iy, block, as.double(weights), as.double(subset))[-1, 
+     -1, ]

> a3 <- ctabs(ix, iy, block, weights, as.double(subset))[-1, 
+     -1, ]

> a4 <- ctabs(ix, iy, block, as.double(weights), subset)[-1, 
+     -1, ]

> stopifnot(isequal(a0, a1) && isequal(a0, a2) && isequal(a0, 
+     a3) && isequal(a0, a4))

> sb <- sample(block)

> ns1 <- do.call("c", tapply(subset, sb[subset], function(i) i))

> ns2 <- .Call(libcoin:::R_order_subset_wrt_block, y, 
+     integer(0), subset, sb)

> stopifnot(isequal(ns1, ns2))

> A <- matrix(runif(12), ncol = 3)

> B <- matrix(runif(10), ncol = 2)

> K1 <- kronecker(A, B)

> K2 <- .Call(libcoin:::R_kronecker, A, B)

> stopifnot(isequal(K1, K2))

> covar <- vcov(ls1)

> covar_sym <- ls1$Covariance

> n <- (sqrt(1 + 8 * length(covar_sym)) - 1)/2

> tol <- sqrt(.Machine$double.eps)

> MP1 <- MPinverse(covar, tol)

> MP2 <- .Call(libcoin:::R_MPinv_sym, covar_sym, as.integer(n), 
+     tol)

> lt <- lower.tri(covar, diag = TRUE)

> stopifnot(isequal(MP1$MPinv[lt], MP2$MPinv) && isequal(MP1$rank, 
+     MP2$rank))

> m <- matrix(c(3, 2, 1, 2, 4, 2, 1, 2, 5), ncol = 3)

> s <- m[lower.tri(m, diag = TRUE)]

> u1 <- .Call(libcoin:::R_unpack_sym, s, NULL, 0)

> u2 <- .Call(libcoin:::R_unpack_sym, s, NULL, 1)

> stopifnot(isequal(m, u1) && isequal(diag(m), u2))

> m <- matrix(c(4, 3, 2, 1, 3, 5, 4, 2, 2, 4, 6, 5, 
+     1, 2, 5, 7), ncol = 4)

> s <- m[lower.tri(m, diag = TRUE)]

> p <- .Call(libcoin:::R_pack_sym, m)

> stopifnot(isequal(s, p))

 *** Run successfully completed ***
> proc.time()
   user  system elapsed 
   0.81    0.07    0.87 
